//
//  Sources/CheckResolved.swift
//  SwinjectAutoregistration
//
//  Generated by Swinject AutoRegistration generator.
//  Copyright Â© 2017 Swinject Contributors. All rights reserved.
//


 import Swinject 


func unresolvedService<A>(_ a: A?) -> String? {
   return ( a == nil ? "\(A.self)" : nil )
}

func checkResolved<Service, A>(initializer: (A) -> Service, services a: A?){
   let unresolved = ( [a] as [Any?] ).filter { $0 == nil }
   if unresolved.count > 0 {
       let warningsMessage = warnings(forInitializer: initializer).map { "\($0.message)\n" }.joined()
       fatalError("SwinjectAutoregistration: Resolution failed.\n\(warningsMessage)Unresolved service: \(unresolvedService(a)!)\nInitializer: (\(A.self)) -> \(Service.self)")
   }
}

func unresolvedService<A, B>(_ a: A?, _ b: B?) -> String? {
   return unresolvedService(a) ?? ( b == nil ? "\(B.self)" : nil )
}

func checkResolved<Service, A, B>(initializer: (A, B) -> Service, services a: A?, _ b: B?){
   let unresolved = ( [a, b] as [Any?] ).filter { $0 == nil }
   if unresolved.count > 0 {
       let warningsMessage = warnings(forInitializer: initializer).map { "\($0.message)\n" }.joined()
       fatalError("SwinjectAutoregistration: Resolution failed.\n\(warningsMessage)Unresolved service: \(unresolvedService(a, b)!)\nInitializer: (\(A.self), \(B.self)) -> \(Service.self)")
   }
}

func unresolvedService<A, B, C>(_ a: A?, _ b: B?, _ c: C?) -> String? {
   return unresolvedService(a, b) ?? ( c == nil ? "\(C.self)" : nil )
}

func checkResolved<Service, A, B, C>(initializer: (A, B, C) -> Service, services a: A?, _ b: B?, _ c: C?){
   let unresolved = ( [a, b, c] as [Any?] ).filter { $0 == nil }
   if unresolved.count > 0 {
       let warningsMessage = warnings(forInitializer: initializer).map { "\($0.message)\n" }.joined()
       fatalError("SwinjectAutoregistration: Resolution failed.\n\(warningsMessage)Unresolved service: \(unresolvedService(a, b, c)!)\nInitializer: (\(A.self), \(B.self), \(C.self)) -> \(Service.self)")
   }
}

func unresolvedService<A, B, C, D>(_ a: A?, _ b: B?, _ c: C?, _ d: D?) -> String? {
   return unresolvedService(a, b, c) ?? ( d == nil ? "\(D.self)" : nil )
}

func checkResolved<Service, A, B, C, D>(initializer: (A, B, C, D) -> Service, services a: A?, _ b: B?, _ c: C?, _ d: D?){
   let unresolved = ( [a, b, c, d] as [Any?] ).filter { $0 == nil }
   if unresolved.count > 0 {
       let warningsMessage = warnings(forInitializer: initializer).map { "\($0.message)\n" }.joined()
       fatalError("SwinjectAutoregistration: Resolution failed.\n\(warningsMessage)Unresolved service: \(unresolvedService(a, b, c, d)!)\nInitializer: (\(A.self), \(B.self), \(C.self), \(D.self)) -> \(Service.self)")
   }
}

func unresolvedService<A, B, C, D, E>(_ a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?) -> String? {
   return unresolvedService(a, b, c, d) ?? ( e == nil ? "\(E.self)" : nil )
}

func checkResolved<Service, A, B, C, D, E>(initializer: (A, B, C, D, E) -> Service, services a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?){
   let unresolved = ( [a, b, c, d, e] as [Any?] ).filter { $0 == nil }
   if unresolved.count > 0 {
       let warningsMessage = warnings(forInitializer: initializer).map { "\($0.message)\n" }.joined()
       fatalError("SwinjectAutoregistration: Resolution failed.\n\(warningsMessage)Unresolved service: \(unresolvedService(a, b, c, d, e)!)\nInitializer: (\(A.self), \(B.self), \(C.self), \(D.self), \(E.self)) -> \(Service.self)")
   }
}

func unresolvedService<A, B, C, D, E, F>(_ a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?, _ f: F?) -> String? {
   return unresolvedService(a, b, c, d, e) ?? ( f == nil ? "\(F.self)" : nil )
}

func checkResolved<Service, A, B, C, D, E, F>(initializer: (A, B, C, D, E, F) -> Service, services a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?, _ f: F?){
   let unresolved = ( [a, b, c, d, e, f] as [Any?] ).filter { $0 == nil }
   if unresolved.count > 0 {
       let warningsMessage = warnings(forInitializer: initializer).map { "\($0.message)\n" }.joined()
       fatalError("SwinjectAutoregistration: Resolution failed.\n\(warningsMessage)Unresolved service: \(unresolvedService(a, b, c, d, e, f)!)\nInitializer: (\(A.self), \(B.self), \(C.self), \(D.self), \(E.self), \(F.self)) -> \(Service.self)")
   }
}

func unresolvedService<A, B, C, D, E, F, G>(_ a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?, _ f: F?, _ g: G?) -> String? {
   return unresolvedService(a, b, c, d, e, f) ?? ( g == nil ? "\(G.self)" : nil )
}

func checkResolved<Service, A, B, C, D, E, F, G>(initializer: (A, B, C, D, E, F, G) -> Service, services a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?, _ f: F?, _ g: G?){
   let unresolved = ( [a, b, c, d, e, f, g] as [Any?] ).filter { $0 == nil }
   if unresolved.count > 0 {
       let warningsMessage = warnings(forInitializer: initializer).map { "\($0.message)\n" }.joined()
       fatalError("SwinjectAutoregistration: Resolution failed.\n\(warningsMessage)Unresolved service: \(unresolvedService(a, b, c, d, e, f, g)!)\nInitializer: (\(A.self), \(B.self), \(C.self), \(D.self), \(E.self), \(F.self), \(G.self)) -> \(Service.self)")
   }
}

func unresolvedService<A, B, C, D, E, F, G, H>(_ a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?, _ f: F?, _ g: G?, _ h: H?) -> String? {
   return unresolvedService(a, b, c, d, e, f, g) ?? ( h == nil ? "\(H.self)" : nil )
}

func checkResolved<Service, A, B, C, D, E, F, G, H>(initializer: (A, B, C, D, E, F, G, H) -> Service, services a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?, _ f: F?, _ g: G?, _ h: H?){
   let unresolved = ( [a, b, c, d, e, f, g, h] as [Any?] ).filter { $0 == nil }
   if unresolved.count > 0 {
       let warningsMessage = warnings(forInitializer: initializer).map { "\($0.message)\n" }.joined()
       fatalError("SwinjectAutoregistration: Resolution failed.\n\(warningsMessage)Unresolved service: \(unresolvedService(a, b, c, d, e, f, g, h)!)\nInitializer: (\(A.self), \(B.self), \(C.self), \(D.self), \(E.self), \(F.self), \(G.self), \(H.self)) -> \(Service.self)")
   }
}

func unresolvedService<A, B, C, D, E, F, G, H, I>(_ a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?, _ f: F?, _ g: G?, _ h: H?, _ i: I?) -> String? {
   return unresolvedService(a, b, c, d, e, f, g, h) ?? ( i == nil ? "\(I.self)" : nil )
}

func checkResolved<Service, A, B, C, D, E, F, G, H, I>(initializer: (A, B, C, D, E, F, G, H, I) -> Service, services a: A?, _ b: B?, _ c: C?, _ d: D?, _ e: E?, _ f: F?, _ g: G?, _ h: H?, _ i: I?){
   let unresolved = ( [a, b, c, d, e, f, g, h, i] as [Any?] ).filter { $0 == nil }
   if unresolved.count > 0 {
       let warningsMessage = warnings(forInitializer: initializer).map { "\($0.message)\n" }.joined()
       fatalError("SwinjectAutoregistration: Resolution failed.\n\(warningsMessage)Unresolved service: \(unresolvedService(a, b, c, d, e, f, g, h, i)!)\nInitializer: (\(A.self), \(B.self), \(C.self), \(D.self), \(E.self), \(F.self), \(G.self), \(H.self), \(I.self)) -> \(Service.self)")
   }
}